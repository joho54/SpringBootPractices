package hello.servlet.web.frontcontroller.v3;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import hello.servlet.web.frontcontroller.ModelView;
import hello.servlet.web.frontcontroller.MyView;
import hello.servlet.web.frontcontroller.v3.controller.MemberFormControllerV3;
import hello.servlet.web.frontcontroller.v3.controller.MemberListControllerV3;
import hello.servlet.web.frontcontroller.v3.controller.MemberSaveControllerV3;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet(name = "frontControllerServletV3", urlPatterns = "/front-controller/v3/*")
public class FrontControllerServletV3 extends HttpServlet{

    private Map<String, ControllerV3> controllerMap = new HashMap<>();

    public FrontControllerServletV3(){
        controllerMap.put("/front-controller/v3/members/new-form", new MemberFormControllerV3());
        controllerMap.put("/front-controller/v3/members/save", new MemberSaveControllerV3());
        controllerMap.put("/front-controller/v3/members", new MemberListControllerV3());
    }

    @Override
    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        System.out.println("FrontControllerServletV3.service()");

        String requestURI = req.getRequestURI(); 
        ControllerV3 controller = controllerMap.get(requestURI);

        if(controller == null){
            resp.setStatus(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        /////////////////////////////////////////
        /* upper area is same as V2 */
        /////////////////////////////////////////
        
        // V3 uses paramMap for inner logic. 
        //gets paramMap from HttpServletRequest(done by createParamMap method)
        Map<String, String> paramMap = createParamMap(req); 

        // we already have controller which is resolved by URI. 
        // now we give controller the paramMap for further process.
        // controllers of V3 returns ModelView(which is consisted by viewName, paramMap)
        ModelView mv = controller.process(paramMap); 

        // view name is already resolved since we got mv from the controller
        String viewName = mv.getViewName();
        
        // view name here is mere logical name(like save, new-form) so we have to resolve it and generate 'real' view object.
        MyView view = viewResolver(viewName);

        // render means following steps.
        // render(model, req, resp)
        //
        // modelToRequestAttribute(model, req);
        // RequestDispatcher dispatcher = req.getRequestDispatcher(viewPath);
        // dispatcher.forward(req, resp);
        view.render(mv.getModel(), req, resp);
        
    }

    /**
     * resolves the View by viewName(logical name)
     * 
     * @param viewName the logical name for controller.
     * @return MyView object which is generated by viewName(logical name)
     */
    private MyView viewResolver(String viewName) {
        return new MyView("/WEB-INF/views/" + viewName + ".jsp");
    }


    /**
      * parse the HTTPServletRequest object and makes paramMap

      * @param req HttpServletRequest which is parsed and used to generate paramMap by putting (paramName, req.getParameter(paramName)) data.
      * @return the Map object for business logic. 
      */
    private Map<String, String> createParamMap(HttpServletRequest req) {
        Map<String, String> paramMap = new HashMap<>();
        req.getParameterNames().asIterator().forEachRemaining(paramName -> paramMap.put(paramName, req.getParameter(paramName)));
        return paramMap;
    }
    
}
